{"version":3,"sources":["assets/robot.jpg","firebase.js","App.js","index.js"],"names":["module","exports","firebase","apps","length","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","App","useState","image","setImage","url","setURL","predictions","handlePredictions","spinner","handleSpinner","showSpinner","robot","handleImage","e","a","db","put","getDownloadURL","then","storage","ref","Math","random","myRealPrediction","mobilenet","loadModel","img","document","getElementById","setAttribute","console","log","classify","p","val","database","push","handleResults","className","type","onChange","target","files","onClick","id","src","alt","height","width","crossOrigin","map","k","key","round","probability","ReactDOM","render"],"mappings":"gHAAAA,EAAOC,QAAU,IAA0B,mC,2SCatCC,IAASC,KAAKC,QAClBF,IAASG,cAZK,CACXC,OAAQ,0CACRC,WAAY,6CACZC,YAAa,oDACbC,UAAW,6BACXC,cAAe,yCACfC,kBAAmB,gBACnBC,MAAO,6CACPC,cAAe,iB,qBC6FJC,EA9FH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEMF,mBAAS,IAFf,mBAETG,EAFS,KAEJC,EAFI,OAGyBJ,mBAAS,IAHlC,mBAGTK,EAHS,KAGIC,EAHJ,OAIiBN,oBAAS,GAJ1B,mBAITO,EAJS,KAIAC,EAJA,KAMVC,EAAc,WACN,KAARN,IAA0B,IAAZI,GAChBH,EAAOM,KACPF,GAAc,IAEdA,GAAc,IAIZG,EAAW,uCAAG,WAAMC,GAAN,SAAAC,EAAA,6DAClBX,EAASU,GADS,SAGZE,EAAGC,IAAIH,GAHK,OAKlBE,EAAGE,iBAAiBC,MAAK,SAAAL,GAAC,OAAIR,EAAOQ,MALnB,2CAAH,sDAOXE,EAAKI,oBAAUC,IAAI,aAAeC,KAAKC,UAGvCC,EAAgB,uCAAG,8BAAAT,EAAA,sEACCU,MADD,cACjBC,EADiB,QAEjBC,EAAMC,SAASC,eAAe,UAChCC,aAAa,cAAe,IAChCC,QAAQC,IAAIL,GAJW,SAKjBD,EAAUO,SAASN,GAAKR,MAAK,SAAUe,GAE3CH,QAAQC,IAAI,gBAAiB7B,EAAO+B,GACpC1B,EAAkB0B,MARG,OAWvBxB,GAAc,GAXS,2CAAH,qDAmBtB,OALmB,uCAAG,WAAMyB,GAAN,SAAApB,EAAA,sEAhBE1B,IAAS+C,WAiBbf,IAAI,KAAKgB,KAAK,CAAEF,QADd,2CAAH,qDAInBG,CAAc/B,GAEZ,yBAAKgC,UAAU,OACb,gFAEA,6BACA,4DAEA,2BACEA,UAAU,SACVC,KAAK,OACLC,SAAU,SAAA3B,GAAC,OAAID,EAAYC,EAAE4B,OAAOC,MAAM,KAC1CC,QAAS,SAAA9B,GACPH,IACAE,EAAYC,EAAE4B,OAAOC,MAAM,OAI/B,6BAEA,6BAEA,4BACEJ,UAAU,SACVK,QAAS,WACPpB,IACAb,MAJJ,mBASF,6BACE,yBACEkC,GAAG,QACHC,IAAKzC,EACL0C,IAAI,GACJC,OAAO,MACPC,MAAM,MACNC,YAAY,cAEd,kDACC3C,EAAY4C,KAAI,SAACrC,EAAGsC,GAAJ,OACf,0BAAMC,IAAKD,GACT,4BAAKtC,EAAEyB,UAAY,KAAOjB,KAAKgC,MAAsB,IAAhBxC,EAAEyC,aAAqB,SAGhE,+BC7FNC,IAASC,OAAO,kBAAC,EAAD,MAAS7B,SAASC,eAAe,W","file":"static/js/main.41e91f0e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/robot.dc28b4a9.jpg\";","import firebase from 'firebase';\n//agrega tus credenciales\nconst config = {\n    apiKey: \"AIzaSyBIUa0UFimfB4uxT4kOGW_2ezcW6fGfw-8\",\n    authDomain: \"ml-image-recognition-67ee0.firebaseapp.com\",\n    databaseURL: \"https://ml-image-recognition-67ee0.firebaseio.com\",\n    projectId: \"ml-image-recognition-67ee0\",\n    storageBucket: \"ml-image-recognition-67ee0.appspot.com\",\n    messagingSenderId: \"1030876500796\",\n    appId: \"1:1030876500796:web:158f05589ab52a047e8439\",\n    measurementId: \"G-L49GGZKYLL\"\n};\n\nif (!firebase.apps.length) {\n\tfirebase.initializeApp(config);\n}\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport * as mobilenet from \"@tensorflow-models/mobilenet\";\nimport robot from \"./assets/robot.jpg\";\n\nimport \"./firebase\";\nimport { storage } from \"firebase\";\nimport firebase from \"firebase/app\";\n\nconst App = () => {\n  const [image, setImage] = useState([]);\n  const [url, setURL] = useState(\"\");\n  const [predictions, handlePredictions] = useState([]);\n  const [spinner, handleSpinner] = useState(true);\n\n  const showSpinner = () => {\n    if (url === \"\" && spinner === true) {\n      setURL(robot);\n      handleSpinner(false);\n    } else {\n      handleSpinner(true);\n    }\n  };\n\n  const handleImage = async e => {\n    setImage(e);\n\n    await db.put(e);\n\n    db.getDownloadURL().then(e => setURL(e));\n  };\n  const db = storage().ref(\"/UserPics/\" + Math.random());\n  const dbResults = () => firebase.database();\n\n  const myRealPrediction = async () => {\n    const loadModel = await mobilenet.load();\n    const img = document.getElementById(\"image\");\n    img.setAttribute(\"crossOrigin\", \"\");\n    console.log(img);\n    await loadModel.classify(img).then(function (p) {\n      // Classify the image\n      console.log(\"Predictions: \", image, p);\n      handlePredictions(p);\n    });\n\n    handleSpinner(true);\n  };\n\n  const handleResults = async val => {\n    await dbResults().ref(\"/\").push({ val });\n  };\n\n  handleResults(predictions);\n  return (\n    <div className=\"App\">\n      <h1>Machine Learning real time image classification </h1>\n\n      <br />\n      <h2>Browse and Upload an image: </h2>\n\n      <input\n        className=\"button\"\n        type=\"file\"\n        onChange={e => handleImage(e.target.files[0])}\n        onClick={e => {\n          showSpinner();\n          handleImage(e.target.files[0]);\n        }}\n      />\n\n      <br />\n\n      <hr />\n\n      <button\n        className=\"button\"\n        onClick={() => {\n          myRealPrediction();\n          showSpinner();\n        }}\n      >\n        Classification:\n      </button>\n    <br />\n      <img\n        id=\"image\"\n        src={url}\n        alt=\"\"\n        height=\"500\"\n        width=\"500\"\n        crossOrigin=\"anonymous\"\n      />\n      <h1>AI Classification:</h1>\n      {predictions.map((e, k) => (\n        <span key={k}>\n          <h5>{e.className + \": \" + Math.round(e.probability * 100) + \"%\"}</h5>\n        </span>\n      ))}\n      <br />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}